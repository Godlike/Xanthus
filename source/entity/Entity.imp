#ifndef XANTHUS_ENTITY_ENTITY_IMP
#define XANTHUS_ENTITY_ENTITY_IMP

#include "entity/Entity.hpp"

namespace xanthus
{
namespace entity
{

template<class C, typename... Args>
    C& Entity::AddComponent(Args&&... args)
{
    C* pComponent = new C(std::forward<Args>(args)...);

    AddComponentImpl(pComponent, Component::GetId<C>());

    return *pComponent;
}

template<class C>
    C& Entity::GetComponent() const
{
    return static_cast<C&>(GetComponentImpl(Component::GetId<C>()));
}

template<class C>
    bool Entity::HasComponent() const
{
    return HasComponentImpl(Component::GetId<C>());
}

template<class C>
    void Entity::DeleteComponent()
{
    DeleteComponentImpl(Component::GetId<C>());
}

}
}

#endif // XANTHUS_ENTITY_ENTITY_IMP
