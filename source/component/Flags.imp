#ifndef XANTHUS_COMPONENT_FLAGS_IMP
#define XANTHUS_COMPONENT_FLAGS_IMP

#include "component/Flags.hpp"

#include "util/TemplateCounter.hpp"
#include "util/Types.hpp"

namespace xanthus
{
namespace component
{

template<class Comp, class... Comps>
    inline void Flags::Set()
{
    const std::size_t componentId = util::TemplateCounter<Component>::GetId<Comp>();

    Set(componentId);

    Set<Comps...>();
}

template<>
    inline void Flags::Set() {}

template<class Comp, class... Comps>
    inline bool Flags::Test()
{
    const std::size_t componentId = util::TemplateCounter<Component>::GetId<Comp>();

    return Test(componentId) && Test<Comps...>();
}

template<>
    inline bool Flags::Test() { return true; }

template<class Comp, class... Comps>
    inline void Flags::Reset()
{
    const std::size_t componentId = util::TemplateCounter<Component>::GetId<Comp>();

    Reset(componentId);

    Reset<Comps...>();
}

template<>
    inline void Flags::Reset() {}

}
}

#include "component/Flags.imp"

#endif // XANTHUS_COMPONENT_FLAGS_IMP
